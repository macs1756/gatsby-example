### Type definitions saved at 2024-05-28T06:28:59.877Z ###

enum RemoteFileFit {
  COVER
  FILL
  OUTSIDE
  CONTAIN
}

enum RemoteFileFormat {
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum RemoteFileLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum RemoteFilePlaceholder {
  DOMINANT_COLOR
  BLURRED
  TRACED_SVG
  NONE
}

enum RemoteFileCropFocus {
  CENTER
  TOP
  RIGHT
  BOTTOM
  LEFT
  ENTROPY
  EDGES
  FACES
}

type RemoteFileResize {
  width: Int
  height: Int
  src: String
}

"""Remote Interface"""
interface RemoteFile {
  id: ID!
  mimeType: String!
  filename: String!
  filesize: Int
  width: Int
  height: Int
  publicUrl: String!
  resize(
    width: Int
    height: Int
    aspectRatio: Float
    fit: RemoteFileFit = COVER

    """
    
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    format: RemoteFileFormat = AUTO
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): RemoteFileResize

  """
  Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info.
  """
  gatsbyImage(
    """
    
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    
    """
    layout: RemoteFileLayout = CONSTRAINED

    """
    
    The display width of the generated image for layout = FIXED, and the display
    width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    
    """
    width: Int

    """
    
    If set, the height of the generated image. If omitted, it is calculated from
    the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR

    """
    
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    
    """
    aspectRatio: Float

    """
    
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    
    """
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF]

    """
    
    A list of image pixel densities to generate for FIXED and CONSTRAINED
    images. You should rarely need to change this. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2]
    for fluid. In this case, an image with a fluid layout and width = 400 would
    generate images at 100, 200, 400 and 800px wide.
    
    """
    outputPixelDensities: [Float] = [0.25, 0.5, 1, 2]

    """
    
    Specifies the image widths to generate. You should rarely need to change
    this. For FIXED and CONSTRAINED images it is better to allow these to be
    determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    
    """
    breakpoints: [Int] = [750, 1080, 1366, 1920]

    """
    
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to
    decide which images to download. You can leave this blank for fixed images,
    or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    
    """
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    fit: RemoteFileFit = COVER
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): GatsbyImageData
}

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  url: String
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Site implements Node @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  polyfill: Boolean
  pathPrefix: String
  jsxRuntime: String
  trailingSlash: String
  graphqlTypegen: Boolean
}

type SiteSiteMetadata {
  title: String
  description: String
}

type SiteFunction implements Node @dontInfer {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  pageContext: JSON @proxy(from: "context", fromNode: false)
  pluginCreator: SitePlugin @link(by: "id", from: "pluginCreatorId")
}

type SitePlugin implements Node @dontInfer {
  resolve: String
  name: String
  version: String
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  pluginOptions: JSON
  packageJson: JSON
}

type SiteBuildMetadata implements Node @dontInfer {
  buildTime: Date @dateformat
}

type STRAPI__MEDIA implements Node @derivedTypes @dontInfer {
  name: String
  alternativeText: String
  width: Int
  height: Int
  formats: STRAPI__MEDIAFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  localFile: File @link(by: "id", from: "localFile___NODE")
  strapi_id: Int
}

type STRAPI__MEDIAFormats @derivedTypes {
  small: STRAPI__MEDIAFormatsSmall
  medium: STRAPI__MEDIAFormatsMedium
  thumbnail: STRAPI__MEDIAFormatsThumbnail
  large: STRAPI__MEDIAFormatsLarge
}

type STRAPI__MEDIAFormatsSmall {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__MEDIAFormatsMedium {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__MEDIAFormatsThumbnail {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__MEDIAFormatsLarge {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_SHARED_SEO implements Node @dontInfer {
  metaTitle: String
  metaDescription: String
  keywords: String
  canonicalURL: String
  strapi_id: Int
}

type STRAPI__COMPONENT_REUSABLE_SPONSORSHIP_BAR implements Node @dontInfer {
  strapi_component: String
  link: String
  description: String
  sponsor: String
  label: String
  image: STRAPI__MEDIA @link(by: "id", from: "image___NODE")
  strapi_id: Int
}

type STRAPI__COMPONENT_REUSABLE_LIST_ITEM implements Node @dontInfer {
  text: String
  strapi_id: Int
}

type STRAPI__COMPONENT_REUSABLE_HEADER_TEXTAREA_CONTENT_TEXTNODE implements Node @dontInfer {
  content: String
}

type STRAPI__COMPONENT_REUSABLE_HEADER_TEXTAREA implements Node @derivedTypes @dontInfer {
  header: String
  content: STRAPI__COMPONENT_REUSABLE_HEADER_TEXTAREAContent
  strapi_id: Int
}

type STRAPI__COMPONENT_REUSABLE_HEADER_TEXTAREAContent {
  data: STRAPI__COMPONENT_REUSABLE_HEADER_TEXTAREA_CONTENT_TEXTNODE @link(by: "id", from: "data___NODE")
}

type STRAPI__COMPONENT_CONTENT_QUOTE implements Node @dontInfer {
  strapi_component: String
  quote: String
  signature: String
  link: String
  strapi_id: Int
}

type STRAPI__COMPONENT_CONTENT_PROS_CONS implements Node @dontInfer {
  strapi_component: String
  pros: [STRAPI__COMPONENT_REUSABLE_LIST_ITEM] @link(by: "id", from: "pros___NODE")
  cons: [STRAPI__COMPONENT_REUSABLE_LIST_ITEM] @link(by: "id", from: "cons___NODE")
  strapi_id: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGET implements Node @derivedTypes @dontInfer {
  strapi_component: String
  product: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProduct
  showDetails: Boolean
  affiliateSlug: String
  strapi_id: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProduct @derivedTypes {
  id: Int
  name: String
  description: String
  rating: Float
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  link: String
  model: String
  editorsChoice: Boolean
  couponCode: String
  couponText: String
  price: Float
  affiliateMenuEditor: String
  affiliateLevel2Editor: String
  affiliateTop3: String
  substances_select: String
  product_types_select: String
  exportedId: String
  slug: String
  isLocked: Boolean
  affiliateLink: String
  locale: String
  image: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductImage
  review: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReview
  alternativeImage: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductAlternativeImage
  gallery: [STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductGallery]
  pros: [STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductPros]
  cons: [STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductCons]
  kitContent: [STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductKitContent]
  specification: [STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductSpecification]
  brand: [STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductBrand]
  localizations: [STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductLocalizations]
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductImage @derivedTypes {
  id: Int
  name: String
  alternativeText: String
  width: Int
  height: Int
  formats: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductImageFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductImageFormats @derivedTypes {
  small: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductImageFormatsSmall
  medium: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductImageFormatsMedium
  thumbnail: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductImageFormatsThumbnail
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductImageFormatsSmall {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductImageFormatsMedium {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductImageFormatsThumbnail {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReview @derivedTypes {
  id: Int
  name: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  publishedAt: Date @dateformat
  slug: String
  excerpt: String
  readtime: Int
  isArchive: Boolean
  publishAt: Date @dateformat
  image: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewImage
  authors: [STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewAuthors]
  seo: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewSeo
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewImage @derivedTypes {
  id: Int
  name: String
  alternativeText: String
  width: Int
  height: Int
  formats: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewImageFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  folderPath: String
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewImageFormats @derivedTypes {
  small: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewImageFormatsSmall
  medium: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewImageFormatsMedium
  thumbnail: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewImageFormatsThumbnail
  large: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewImageFormatsLarge
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewImageFormatsSmall {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewImageFormatsMedium {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewImageFormatsThumbnail {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewImageFormatsLarge {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewAuthors @derivedTypes {
  id: Int
  username: String
  email: String
  password: String
  confirmed: Boolean
  blocked: Boolean
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  favoriteFlavours: String
  expertiseIn: String
  fullName: String
  description: String
  twitter: String
  linkedIn: String
  vapingSince: Date @dateformat
  postCount: Int
  authorPosition: String
  role: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewAuthorsRole
  avatar: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewAuthorsAvatar
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewAuthorsRole @derivedTypes {
  id: Int
  name: String
  description: String
  type: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  permissions: [STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewAuthorsRolePermissions]
  users: [STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewAuthorsRoleUsers]
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewAuthorsRolePermissions {
  id: Int
  action: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewAuthorsRoleUsers {
  id: Int
  username: String
  email: String
  provider: String
  password: String
  confirmed: Boolean
  blocked: Boolean
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  favoriteFlavours: String
  expertiseIn: String
  fullName: String
  description: String
  twitter: String
  linkedIn: String
  vapingSince: Date @dateformat
  postCount: Int
  authorPosition: String
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewAuthorsAvatar @derivedTypes {
  id: Int
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewAuthorsAvatarFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  folderPath: String
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewAuthorsAvatarFormats @derivedTypes {
  thumbnail: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewAuthorsAvatarFormatsThumbnail
  large: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewAuthorsAvatarFormatsLarge
  small: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewAuthorsAvatarFormatsSmall
  medium: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewAuthorsAvatarFormatsMedium
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewAuthorsAvatarFormatsThumbnail {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewAuthorsAvatarFormatsLarge {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewAuthorsAvatarFormatsSmall {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewAuthorsAvatarFormatsMedium {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewSeo @derivedTypes {
  id: Int
  metaTitle: String
  metaDescription: String
  keywords: String
  canonicalURL: String
  metaImage: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewSeoMetaImage
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewSeoMetaImage @derivedTypes {
  id: Int
  name: String
  alternativeText: String
  width: Int
  height: Int
  formats: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewSeoMetaImageFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  folderPath: String
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewSeoMetaImageFormats @derivedTypes {
  small: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewSeoMetaImageFormatsSmall
  medium: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewSeoMetaImageFormatsMedium
  thumbnail: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewSeoMetaImageFormatsThumbnail
  large: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewSeoMetaImageFormatsLarge
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewSeoMetaImageFormatsSmall {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewSeoMetaImageFormatsMedium {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewSeoMetaImageFormatsThumbnail {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductReviewSeoMetaImageFormatsLarge {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductAlternativeImage @derivedTypes {
  id: Int
  name: String
  alternativeText: String
  width: Int
  height: Int
  formats: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductAlternativeImageFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  folderPath: String
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductAlternativeImageFormats @derivedTypes {
  small: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductAlternativeImageFormatsSmall
  medium: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductAlternativeImageFormatsMedium
  thumbnail: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductAlternativeImageFormatsThumbnail
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductAlternativeImageFormatsSmall {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductAlternativeImageFormatsMedium {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductAlternativeImageFormatsThumbnail {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductGallery @derivedTypes {
  id: Int
  name: String
  alternativeText: String
  width: Int
  height: Int
  formats: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductGalleryFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  folderPath: String
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductGalleryFormats @derivedTypes {
  small: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductGalleryFormatsSmall
  medium: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductGalleryFormatsMedium
  thumbnail: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductGalleryFormatsThumbnail
  large: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductGalleryFormatsLarge
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductGalleryFormatsSmall {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductGalleryFormatsMedium {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductGalleryFormatsThumbnail {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductGalleryFormatsLarge {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductPros {
  id: Int
  text: String
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductCons {
  id: Int
  text: String
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductKitContent {
  id: Int
  text: String
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductSpecification @derivedTypes {
  id: Int
  value: String
  label: STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductSpecificationLabel
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductSpecificationLabel {
  id: Int
  name: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  locale: String
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductBrand {
  id: Int
  name: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
}

type STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETProductLocalizations {
  id: Int
  name: String
  description: String
  rating: Float
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  link: String
  model: String
  editorsChoice: Boolean
  couponCode: String
  couponText: String
  price: Int
  affiliateMenuEditor: String
  affiliateLevel2Editor: String
  affiliateTop3: String
  substances_select: String
  product_types_select: String
  exportedId: String
  slug: String
  isLocked: Boolean
  affiliateLink: String
  locale: String
}

type STRAPI__COMPONENT_CONTENT_IMAGE implements Node @dontInfer {
  strapi_component: String
  image: STRAPI__MEDIA @link(by: "id", from: "image___NODE")
  strapi_id: Int
}

type STRAPI__COMPONENT_CONTENT_HIGHLIGHT_CONTENT_TEXTNODE implements Node @dontInfer {
  content: String
}

type STRAPI__COMPONENT_CONTENT_HIGHLIGHT implements Node @derivedTypes @dontInfer {
  strapi_component: String
  header: String
  type: String
  content: STRAPI__COMPONENT_CONTENT_HIGHLIGHTContent
  strapi_id: Int
}

type STRAPI__COMPONENT_CONTENT_HIGHLIGHTContent {
  data: STRAPI__COMPONENT_CONTENT_HIGHLIGHT_CONTENT_TEXTNODE @link(by: "id", from: "data___NODE")
}

type STRAPI__COMPONENT_CONTENT_GALLERY implements Node @dontInfer {
  strapi_component: String
  gallery: [STRAPI__MEDIA] @link(by: "id", from: "gallery___NODE")
  strapi_id: Int
}

type STRAPI__COMPONENT_CONTENT_DROPDOWN implements Node @dontInfer {
  strapi_component: String
  headerTextarea: [STRAPI__COMPONENT_REUSABLE_HEADER_TEXTAREA] @link(by: "id", from: "headerTextarea___NODE")
  strapi_id: Int
}

type STRAPI__COMPONENT_CONTENT_COUPON implements Node @dontInfer {
  strapi_component: String
  text: String
  couponCode: String
  link: String
  strapi_id: Int
}

type STRAPI__COMPONENT_CONTENT_CK_EDITOR_TEXTAREA_TEXTNODE implements Node @dontInfer {
  textarea: String
}

type STRAPI__COMPONENT_CONTENT_CK_EDITOR implements Node @derivedTypes @dontInfer {
  strapi_component: String
  textarea: STRAPI__COMPONENT_CONTENT_CK_EDITORTextarea
  cmsLabel: String
  strapi_id: Int
}

type STRAPI__COMPONENT_CONTENT_CK_EDITORTextarea {
  data: STRAPI__COMPONENT_CONTENT_CK_EDITOR_TEXTAREA_TEXTNODE @link(by: "id", from: "data___NODE")
}

type STRAPI__COMPONENT_CONTENT_BUTTON implements Node @dontInfer {
  strapi_component: String
  text: String
  link: String
  type: String
  strapi_id: Int
}

type STRAPI_USER implements Node @derivedTypes @dontInfer {
  username: String
  email: String
  confirmed: Boolean
  blocked: Boolean
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  favoriteFlavours: String
  expertiseIn: String
  fullName: String
  description: STRAPI_USERDescription
  twitter: String
  linkedIn: String
  vapingSince: Date @dateformat
  postCount: Int
  authorPosition: String
  avatar: STRAPI_USERAvatar
  strapi_id: Int
}

type STRAPI_USERDescription {
  data: String
}

type STRAPI_USERAvatar @derivedTypes {
  id: Int
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: STRAPI_USERAvatarFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
}

type STRAPI_USERAvatarFormats @derivedTypes {
  thumbnail: STRAPI_USERAvatarFormatsThumbnail
  large: STRAPI_USERAvatarFormatsLarge
  small: STRAPI_USERAvatarFormatsSmall
  medium: STRAPI_USERAvatarFormatsMedium
}

type STRAPI_USERAvatarFormatsThumbnail {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_USERAvatarFormatsLarge {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_USERAvatarFormatsSmall {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_USERAvatarFormatsMedium {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_REVIEW implements Node @derivedTypes @dontInfer {
  name: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  publishedAt: Date @dateformat
  slug: String
  excerpt: String
  readtime: Int
  isArchive: Boolean
  publishAt: Date @dateformat
  whyTrust: STRAPI_REVIEWWhyTrust
  content: [STRAPI__COMPONENT_CONTENT_BUTTONSTRAPI__COMPONENT_CONTENT_CK_EDITORSTRAPI__COMPONENT_CONTENT_COUPONSTRAPI__COMPONENT_CONTENT_DROPDOWNSTRAPI__COMPONENT_CONTENT_GALLERYSTRAPI__COMPONENT_CONTENT_HIGHLIGHTSTRAPI__COMPONENT_CONTENT_IMAGESTRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETSTRAPI__COMPONENT_CONTENT_PROS_CONSSTRAPI__COMPONENT_CONTENT_QUOTESTRAPI__COMPONENT_REUSABLE_SPONSORSHIP_BARUnion] @link(by: "id", from: "content___NODE")
  authors: [STRAPI_USER] @link(by: "id", from: "authors___NODE")
  seo: STRAPI__COMPONENT_SHARED_SEO @link(by: "id", from: "seo___NODE")
  image: STRAPI__MEDIA @link(by: "id", from: "image___NODE")
  buyNowProducts: [STRAPI_PRODUCT] @link(by: "id", from: "buyNowProducts___NODE")
  strapi_id: Int
}

type STRAPI_REVIEWWhyTrust @derivedTypes {
  id: Int
  label: String
  content: String
  link: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  first_item_label: String
  second_item_label: String
  productTooltip: String
  productTooltipLink: String
  avatar: STRAPI_REVIEWWhyTrustAvatar
  first_item_image: STRAPI_REVIEWWhyTrustFirst_item_image
  second_item_image: STRAPI_REVIEWWhyTrustSecond_item_image
}

type STRAPI_REVIEWWhyTrustAvatar {
  id: Int
  name: String
  width: Int
  height: Int
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  folderPath: String
}

type STRAPI_REVIEWWhyTrustFirst_item_image {
  id: Int
  name: String
  width: Int
  height: Int
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  folderPath: String
}

type STRAPI_REVIEWWhyTrustSecond_item_image {
  id: Int
  name: String
  width: Int
  height: Int
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  folderPath: String
}

union STRAPI__COMPONENT_CONTENT_BUTTONSTRAPI__COMPONENT_CONTENT_CK_EDITORSTRAPI__COMPONENT_CONTENT_COUPONSTRAPI__COMPONENT_CONTENT_DROPDOWNSTRAPI__COMPONENT_CONTENT_GALLERYSTRAPI__COMPONENT_CONTENT_HIGHLIGHTSTRAPI__COMPONENT_CONTENT_IMAGESTRAPI__COMPONENT_CONTENT_PRODUCT_WIDGETSTRAPI__COMPONENT_CONTENT_PROS_CONSSTRAPI__COMPONENT_CONTENT_QUOTESTRAPI__COMPONENT_REUSABLE_SPONSORSHIP_BARUnion = STRAPI__COMPONENT_CONTENT_BUTTON | STRAPI__COMPONENT_CONTENT_CK_EDITOR | STRAPI__COMPONENT_CONTENT_COUPON | STRAPI__COMPONENT_CONTENT_DROPDOWN | STRAPI__COMPONENT_CONTENT_GALLERY | STRAPI__COMPONENT_CONTENT_HIGHLIGHT | STRAPI__COMPONENT_CONTENT_IMAGE | STRAPI__COMPONENT_CONTENT_PRODUCT_WIDGET | STRAPI__COMPONENT_CONTENT_PROS_CONS | STRAPI__COMPONENT_CONTENT_QUOTE | STRAPI__COMPONENT_REUSABLE_SPONSORSHIP_BAR

type STRAPI_PRODUCT implements Node @derivedTypes @dontInfer {
  name: String
  description: String
  rating: Float
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  link: String
  model: String
  editorsChoice: Boolean
  couponCode: String
  couponText: String
  price: Float
  affiliateMenuEditor: String
  affiliateLevel2Editor: String
  affiliateTop3: String
  substances_select: String
  product_types_select: String
  slug: String
  isLocked: Boolean
  affiliateLink: String
  locale: String
  image: STRAPI_PRODUCTImage
  review: STRAPI_PRODUCTReview
  alternativeImage: STRAPI_PRODUCTAlternativeImage
  gallery: [STRAPI_PRODUCTGallery]
  pros: [STRAPI_PRODUCTPros]
  cons: [STRAPI_PRODUCTCons]
  kitContent: [STRAPI_PRODUCTKitContent]
  specification: [STRAPI_PRODUCTSpecification]
  brand: [STRAPI_PRODUCTBrand]
  substances: [STRAPI_PRODUCTSubstances]
  product_types: [STRAPI_PRODUCTProduct_types]
  localizations: STRAPI_PRODUCTLocalizations
  strapi_id: Int
}

type STRAPI_PRODUCTImage @derivedTypes {
  id: Int
  name: String
  alternativeText: String
  width: Int
  height: Int
  formats: STRAPI_PRODUCTImageFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
}

type STRAPI_PRODUCTImageFormats @derivedTypes {
  thumbnail: STRAPI_PRODUCTImageFormatsThumbnail
  small: STRAPI_PRODUCTImageFormatsSmall
  medium: STRAPI_PRODUCTImageFormatsMedium
}

type STRAPI_PRODUCTImageFormatsThumbnail {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_PRODUCTImageFormatsSmall {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_PRODUCTImageFormatsMedium {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_PRODUCTReview {
  id: Int
  name: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  publishedAt: Date @dateformat
  slug: String
  excerpt: String
  readtime: Int
  isArchive: Boolean
  publishAt: Date @dateformat
}

type STRAPI_PRODUCTAlternativeImage @derivedTypes {
  id: Int
  name: String
  alternativeText: String
  width: Int
  height: Int
  formats: STRAPI_PRODUCTAlternativeImageFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
}

type STRAPI_PRODUCTAlternativeImageFormats @derivedTypes {
  thumbnail: STRAPI_PRODUCTAlternativeImageFormatsThumbnail
  small: STRAPI_PRODUCTAlternativeImageFormatsSmall
  medium: STRAPI_PRODUCTAlternativeImageFormatsMedium
}

type STRAPI_PRODUCTAlternativeImageFormatsThumbnail {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_PRODUCTAlternativeImageFormatsSmall {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_PRODUCTAlternativeImageFormatsMedium {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_PRODUCTGallery @derivedTypes {
  id: Int
  name: String
  alternativeText: String
  width: Int
  height: Int
  formats: STRAPI_PRODUCTGalleryFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
}

type STRAPI_PRODUCTGalleryFormats @derivedTypes {
  small: STRAPI_PRODUCTGalleryFormatsSmall
  medium: STRAPI_PRODUCTGalleryFormatsMedium
  thumbnail: STRAPI_PRODUCTGalleryFormatsThumbnail
  large: STRAPI_PRODUCTGalleryFormatsLarge
}

type STRAPI_PRODUCTGalleryFormatsSmall {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_PRODUCTGalleryFormatsMedium {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_PRODUCTGalleryFormatsThumbnail {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_PRODUCTGalleryFormatsLarge {
  ext: String
  url: String
  hash: String
  mime: String
  name: String
  size: Float
  width: Int
  height: Int
}

type STRAPI_PRODUCTPros {
  id: Int
  text: String
}

type STRAPI_PRODUCTCons {
  id: Int
  text: String
}

type STRAPI_PRODUCTKitContent {
  id: Int
  text: String
}

type STRAPI_PRODUCTSpecification {
  id: Int
  value: String
}

type STRAPI_PRODUCTBrand {
  id: Int
  name: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
}

type STRAPI_PRODUCTSubstances {
  id: Int
  name: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
}

type STRAPI_PRODUCTProduct_types {
  id: Int
  name: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
}

type STRAPI_PRODUCTLocalizations @derivedTypes {
  data: [STRAPI_PRODUCTLocalizationsData]
}

type STRAPI_PRODUCTLocalizationsData @derivedTypes {
  id: Int
  attributes: STRAPI_PRODUCTLocalizationsDataAttributes
}

type STRAPI_PRODUCTLocalizationsDataAttributes {
  name: String
  description: String
  rating: Float
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  link: String
  model: String
  editorsChoice: Boolean
  couponCode: String
  couponText: String
  price: Int
  affiliateMenuEditor: String
  affiliateLevel2Editor: String
  affiliateTop3: String
  substances_select: String
  product_types_select: String
  slug: String
  isLocked: Boolean
  affiliateLink: String
  locale: String
}